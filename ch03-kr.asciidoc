[[ch03_bitcoin_client]]
// == Bitcoin Core: The Reference Implementation
== 비트코인 코어: 참조구현

// ((("open source licenses")))((("Nakamoto, Satoshi")))Bitcoin is an _open source_ project and the source code is available under an open (MIT) license, free to download and use for any purpose. Open source means more than simply free to use. It also means that bitcoin is developed by an open community of volunteers. At first, that community consisted of only Satoshi Nakamoto. By 2016, bitcoin's source code had more than 400 contributors with about a dozen developers working on the code almost full-time and several dozen more on a part-time basis. Anyone can contribute to the code&#x2014;including you!
((("open source licenses")))((("Nakamoto, Satoshi")))비트코인은 _오픈소스 (open source)_ 프로젝트이며 오픈 (MIT) 라이센스로 이용가능하고, 자유롭게 다운로드하여 어떤 목적으로든 사용가능하다. 오픈소스는 무료로 사용하는 것 이상의 의미를 가지며 비트코인이 오픈 커뮤니티의 자발적인 참여로 이루어졌음을 뜻한다. 최초의 커뮤니티는 사토시 나카모토 한 명으로 시작되었다. 2016년까지 비트코인 소스코드에는 400명 이상이 기여하였고 약 12명의 개발자가 풀타임으로, 수십 명의 개발자가 파트타임으로 코드 작업에 참여하고 있다. 누구든지 코드에 기여할 수 있다&#x2014;당신도 마찬가지!


// ((("bitcoin whitepaper")))((("Satoshi client")))((("reference implementation", see="Bitcoin Core")))((("Bitcoin Core", "reference implementation")))When bitcoin was created by Satoshi Nakamoto, the software was actually completed before the whitepaper reproduced in <<satoshi_whitepaper>> was written. Satoshi wanted to make sure it worked before writing about it. That first implementation, then simply known as "Bitcoin" or "Satoshi client," has been heavily modified and improved. It has evolved into what is known as _Bitcoin Core_, to differentiate it from other compatible implementations. Bitcoin Core is the _reference implementation_ of the bitcoin system, meaning that it is the authoritative reference on how each part of the technology should be implemented. Bitcoin Core implements all aspects of bitcoin, including wallets, a transaction and block validation engine, and a full network node in the peer-to-peer bitcoin network.
((("bitcoin whitepaper")))((("Satoshi client")))((("reference implementation", see="Bitcoin Core")))((("Bitcoin Core", "reference implementation")))사토시 나타모토가 비트코인을 만들었을 때, 소프트웨어는 백서가 <<satoshi_whitepaper>> 로 쓰여지기 전에 완성되었다. 사토시는 백서를 쓰기 전에 비트코인이 작동하는 것을 확인하고 싶었다. "비트코인" 또는 "사토시 클라이언트"로 알려져 있는 최초 구현은 크게 수정되고 개선되었다. 그것은 다른 호환 가능한 구현과 구별하기 위해 _비트코인 코어 (Bitcoin Core)_ 로 발달했다. 비트코인 코어는 비트코인 시스템의 _참조구현 (reference implementation)_ 이며, 기술의 각 부분을 구현하는 방법에 대한 공식적인 참고문헌임을 의미한다. 비트코인 코어는 지갑, 거래와 검증 엔진 및 P2P 비트코인 네트워크의 풀 네트워크 노드를 포함한 비트코인의 모든 요소를 구현한다.

[WARNING]
====
// ((("wallets", "best practices for")))((("bitcoin improvement proposals", "Mnemonic Code Words (BIP-39)")))((("bitcoin improvement proposals", "Hierarchical Deterministic Wallets (BIP-32/BIP-44)")))Even though Bitcoin Core includes a reference implementation of a wallet, this is not intended to be used as a production wallet for users or for applications. Application developers are advised to build wallets using modern standards such as BIP-39 and BIP-32 (see <<mnemonic_code_words>> and <<hd_wallets>>). BIP stands for _Bitcoin Improvement Proposal_.
((("wallets", "best practices for")))((("bitcoin improvement proposals", "Mnemonic Code Words (BIP-39)")))((("bitcoin improvement proposals", "Hierarchical Deterministic Wallets (BIP-32/BIP-44)")))비트코인 코어가 지갑의 참조 구현을 포함하고 있지만 사용자 지갑 생성이나 어플리케이션용으로 사용하기에는 적절하지 않다. 어플리케이션 개발자는 최근 기준인 BIP-39와 BIP-32를 사용하여 지갑을 구축하는 것을 추천한다 (<<mnemonic_code_words>> 및 <<hd_wallets>> 를 참고하라). BIP는 _비트코인 개선 제안 (Bitcoin Improvement Proposal)_ 을 의미한다.
====

// <<bitcoin_core_architecture>> shows the architecture of Bitcoin Core.((("Bitcoin Core", "architecture")))
그림 <<bitcoin_core_architecture>>는 비트코인 코어 구조를 보여준다.((("Bitcoin Core", "architecture")))

[[bitcoin_core_architecture]]
// .Bitcoin Core architecture (Source: Eric Lombrozo)
.비트코인 코어 구조 (출처: Eric Lombrozo)
image::images/mbc2_0301.png["Bitcoin Core Architecture"]


// === Bitcoin Development Environment
=== 비트코인 개발 환경

// ((("development environme<<bitcoin_core_architecture>>는 비트코인 코어 구조를 보여준다.nt", "setup", see="Bitcoin Core")))If you're a developer, you will want to set up a development environment with all the tools, libraries, and support software for writing bitcoin applications. In this highly technical chapter, we'll walk through that process step-by-step. If the material becomes too dense (and you're not actually setting up a development environment) feel free to skip to the next chapter, which is less technical.
((("development environme<<bitcoin_core_architecture>>는 비트코인 코어 구조를 보여준다.nt", "setup", see="Bitcoin Core")))당신이 개발자라면 모든 도구, 라이브러리를 가진 환경을 개발하고 비트코인 어플리케이션 작성을 위한 소프트웨어를 지원하고 싶을 것이다. 매우 기술적인 관점에서 작성한 이 챕터에서 우리는 이 과정을 하나 하나 살펴 볼 것이다. 만약 여기에서 다루는 내용이 매우 난해하다면 (그리고 실제로 개발 환경 구축을 진행하고 있는 것이 아니라면), 덜 기술적인 내용에 대해 설명한 다음 챕터로 자유롭게 넘어가도 좋다.

[[compiling_core]]
// === Compiling Bitcoin Core from the Source Code
=== 소스코드에서 비트코인 코어 컴파일 실행하기

// ((("Bitcoin Core", "compiling from source code", id="BCsource03")))((("Bitcoin Core", "compiling from source code", "downloading")))((("code examples, obtaining and using")))Bitcoin Core's source code can be downloaded as a archive or by cloning the authoritative source repository from GitHub.  ((("Bitcoin Core downloads")))On the https://bitcoincore.org/bin/[Bitcoin Core download page], select the most recent version and download the compressed archive of the source code, e.g., +bitcoin-0.15.0.2.tar.gz+. ((("GitHub bitcoin page")))Alternatively, use the git command line to create a local copy of the source code from the https://github.com/bitcoin/bitcoin[GitHub bitcoin page].
((("Bitcoin Core", "compiling from source code", id="BCsource03")))((("Bitcoin Core", "compiling from source code", "downloading")))((("code examples, obtaining and using")))비트코인 코어 소스 코드는 아카이브로 다운로드하거나 Github의 중앙 저장소 (authoritative source repository)로부터 복사할 수 있다. ((("Bitcoin Core downloads")))https://bitcoincore.org/bin/[비트코인 코어 다운로드 페이지]에서 가장 최신 버전을 선택하고 +bitcoin-0.15.0.2.tar.gz+ 와 같은 소스 코드 압축 아카이브를 다운로드하라. ((("GitHub bitcoin page")))대신 https://github.com/bitcoin/bitcoin[GitHub 비트코인 페이지]로부터 소스 코드의 로컬 복사복은 만들기 위해 git 명령행을 사용하라.

[TIP]
====
// ((("$ symbol")))((("shell commands")))((("terminal applications")))In many of the examples in this chapter we will be using the operating system's command-line interface (also known as a "shell"), accessed via a "terminal" application. The shell will display a prompt; you type a command; and the shell responds with some text and a new prompt for your next command. The prompt may look different on your system, but in the following examples it is denoted by a +$+ symbol. In the examples, when you see text after a +$+ symbol, don't type the +$+ symbol but type the command immediately following it, then press Enter to execute the command. In the examples, the lines below each command are the operating system's responses to that command. When you see the next +$+ prefix, you'll know it's a new command and you should repeat the process.
((("$ symbol")))((("shell commands")))((("terminal applications")))3장의 다양한 예를 통해 "터미널" 어플리케이션을 통해 접속하여 운영 체제의 명령행 인터페이스 ("쉘" 로도 알려져 있음)를 사용해 볼 것이다. 쉘은 프롬프트 (prompt)를 보여준다; 당신은 명령을 입력한다; 그러면 쉘은 다음 명령에 대한 텍스트와 새로운 프롬프트로 응답한다. 프롬프트는 당신이 가진 시스템에 따라 다르게 보일 수 있지만 다음 예제에서는 +$+ 기호로 표시된다. 예제에서 +$+ 기호 다음에 텍스트가 표시되면, +$+ 기호를 입력하지 말고 바로 그 다음에 명령을 입력한 후 Enter 키를 눌러 명령을 실행하라. 예에서 각 명령 아래의 행은 명령에 대한 운영 체제의 응답이다. 다음 +$+ 접두사가 보일 때, 새로운 명령임을 알 수 있을 것이며 이 과정을 반복해야 한다.
====

// ((("cloning source code")))((("source code, cloning", seealso="Bitcoin Core")))In this example, we are using the +git+ command to create a local copy ("clone") of the source code:
이번 예제에서는 +git+ 명령을 사용하여 소스 코드의 로컬 복사본 ("클론")을 생성할 것이다:

----
$ git clone https://github.com/bitcoin/bitcoin.git
Cloning into 'bitcoin'...
remote: Counting objects: 102071, done.
remote: Compressing objects: 100% (10/10), done.
Receiving objects: 100% (102071/102071), 86.38 MiB | 730.00 KiB/s, done.
remote: Total 102071 (delta 4), reused 5 (delta 1), pack-reused 102060
Resolving deltas: 100% (76168/76168), done.
Checking connectivity... done.
$
----

[TIP]
====
// ((("distributed version control systems")))Git is the most widely used distributed version control system, an essential part of any software developer's toolkit. You may need to install the +git+ command, or a graphical user interface for git, on your operating system if you do not have it already.
((("distributed version control systems"))) Git은 가장 널리 사용되는 분산 버전 제어 시스템으로 모든 소프트웨어 개발자 툴킷의 필수 요소이다. 아직 설치하지 않았다면 운영 체제에 +git+ 명령 또는 git 용 그래픽 사용자 인터페이스를 설치해야 할 수도 있다.
====

// When the git cloning operation has completed, you will have a complete local copy of the source code repository in the directory _bitcoin_. Change to this directory by typing ++**cd bitcoin**++ at the prompt:
git 복제 작업이 완료되면 소스 코드 보관소의 파일이 _bitcoin_ 이라는 로컬 디렉토리에 복사된다. 프롬프트에 ++**cd bitcoin**++ 를 입력하여 이 디렉토리로 이동해보자:

----
$ cd bitcoin
----

// ==== Selecting a Bitcoin Core Release
비트코인 코어 릴리즈 선택하기
// ((("Bitcoin Core", "compiling from source code", "version selection")))By default, the local copy will be synchronized with the most recent code, which might be an unstable or beta version of bitcoin. Before compiling the code, select a specific version by checking out a release _tag_. This will synchronize the local copy with a specific snapshot of the code repository identified by a keyword tag. Tags are used by the developers to mark specific releases of the code by version number. First, to find the available tags, we use the +git tag+ command:
((("Bitcoin Core", "compiling from source code", "version selection")))기본적으로 로컬 복사본은 가장 최근 코드와 동기화된다. 이 코드는 불안정할 수도 있고 비트코인의 베타 버전일 수도 있다. 해당 코드를 컴파일 하기 전에 릴리즈 _태그 (tag)_ 를 확인하여 특정 버전을 선택하라. 이를 통해 키워드 태그로 찾을 수 있는 해당 코드 보관소에 대한 특정 스냅샷을 가진 로컬 복사본이 동기화 될 것이다. 개발자들은 버전 번호에 따라 코드의 특정 릴리즈를 표시하기 위해 태그를 사용한다. 먼저, 사용 가능한 태그를 찾기 위해 +git tag+ 명령을 사용할 것이다:

----
$ git tag
v0.1.5
v0.1.6test1
v0.10.0
...
v0.11.2
v0.11.2rc1
v0.12.0rc1
v0.12.0rc2
...
----

// The list of tags shows all the released versions of bitcoin. By convention, _release candidates_, which are intended for testing, have the suffix "rc." Stable releases that can be run on production systems have no suffix. From the preceding list, select the highest version release, which at the time of writing was v0.15.0. To synchronize the local code with this version, use the +git checkout+ command:
태그 목록은 비트코인 릴리즈 버전 모두를 보여준다. 관례상 테스트용 _RC 버전 (release candidates)_ 은 접미사 "rc" 를 사용한다. 상용 시스템에서 가동 가능한 안정된 릴리즈는 접미사를 사용하지 않는다. 앞에 나온 목록에서 가장 높은 버전의 릴리즈를 선택하자. 지금 시점에서는 v0.15.0 이다. 이 버전을 로컬 코드와 동기화하기 위해 +git checkout+ 명령을 사용한다.

----
$ git checkout v0.15.0
HEAD is now at 3751912... Merge #11295: doc: Old fee_estimates.dat are discarded by 0.15.0
----

// You can confirm you have the desired version "checked out" by issuing the command +git status+:
이제 +git status+ 명령을 실행하여 원하는 버전을 "체크아웃 (checked out)" 했는지 확인 할 수 있다:

----
$ git status
HEAD detached at v0.15.0
nothing to commit, working directory clean
----

// ==== Configuring the Bitcoin Core Build
==== 비트코인 코어 빌드 구성하기

// ((("Bitcoin Core", "compiling from source code", "build configuration")))((("documentation")))((("build documentation", seealso="Bitcoin Core")))The source code includes documentation, which can be found in a number of files. Review the main documentation located in _README.md_ in the _bitcoin_ directory by typing ++**more README.md**++ at the prompt and using the spacebar to progress to the next page. In this chapter, we will build the command-line bitcoin client, also known as +bitcoind+ on Linux. Review the instructions for compiling the +bitcoind+ command-line client on your platform by typing ++**more doc/build-unix.md**++. Alternative instructions for macOS and Windows can be found in the _doc_ directory, as _build-osx.md_ or _build-windows.md_, respectively.
((("Bitcoin Core", "compiling from source code", "build configuration")))((("documentation")))((("build documentation", seealso="Bitcoin Core")))소스 코드는 다량의 파일 내에서 찾을 수 있는 참고 문서들의 내용을 포함한다. 프롬프트에 ++**more README.md**++ 를 입력하고 스페이스 바를 이용해 다음 페이지로 넘기면서 _비트코인_ 디렉토리 내 _README.md_ 에 위치한 주요 문서 내용을 확인하라. 이 장에서는 리눅스에서 +bitcoind+ 로 알려진 명령행 비트코인 클라이언트를 빌드해 볼 것이다. ++**more doc/build-unix.md**++ 를 입력하여 당신의 플랫폼 상에서 +bitcoind+ 명령행 클라이언트 컴파일링을 위한 설명을 확인하라. macOS나 윈도우를 위한 설명은 각각 _build-osx.md_ 또는 _build-windows.md_ 로 _doc_ 디렉토리에서 확인할 수 있다.

// Carefully review the build prerequisites, which are in the first part of the build documentation. These are libraries that must be present on your system before you can begin to compile bitcoin. If these prerequisites are missing, the build process will fail with an error. If this happens because you missed a prerequisite, you can install it and then resume the build process from where you left off. Assuming the prerequisites are installed, you start the build process by generating a set of build scripts using the _autogen.sh_ script.
빌드 문서의 첫 번째 요소인 빌드 전제 조건에 대해 자세히 살펴보자. 이것은 비트코인 컴파일을 시작하기 전에 시스템에 반드시 존재해야 하는 라이브러리이다. 이러한 전제 조건을 행하지 않았을 경우, 빌드 과정에서 에러가 발생할 것이다. 전제 조건 때문에 이러한 에러가 발생했다면, 해당 전제 조건을 설치하여 빠뜨린 부분부터 빌드 프로세스를 다시 재개할 수 있다. 전제 조건이 설치되었다고 가정하면, _autogen.sh_ 스크립트를 사용하여 빌드 스크립트의 한 부분을 생성함으로써 빌드 과정을 시작할 수 있다.

----
$ ./autogen.sh
...
glibtoolize: copying file 'build-aux/m4/libtool.m4'
glibtoolize: copying file 'build-aux/m4/ltoptions.m4'
glibtoolize: copying file 'build-aux/m4/ltsugar.m4'
glibtoolize: copying file 'build-aux/m4/ltversion.m4'
...
configure.ac:10: installing 'build-aux/compile'
configure.ac:5: installing 'build-aux/config.guess'
configure.ac:5: installing 'build-aux/config.sub'
configure.ac:9: installing 'build-aux/install-sh'
configure.ac:9: installing 'build-aux/missing'
Makefile.am: installing 'build-aux/depcomp'
...
----

// The _autogen.sh_ script creates a set of automatic configuration scripts that will interrogate your system to discover the correct settings and ensure you have all the necessary libraries to compile the code. The most important of these is the +configure+ script that offers a number of different options to customize the build process. Type ++**./configure --help**++ to see the various options:
올바른 설정 여부를 확인하기 위해 시스템을 검색하고 코드 컴파일에 필요한 라이브러리가 있는지 확인하는 역할을 하게 될 자동 설정 스크립트 세트가 _autogen.sh_ 스크립트를 통해 생성된다. 여기서 가장 중요한 것은 빌드 과정을 사용자가 지정할 수 있도록 다양한 옵션을 제공하는 +configure+ 스크립트이다. 다양한 옵션을 확인하기 위해 ++**./configure --help**++ 를 입력하라.

----
$ ./configure --help
`configure' configures Bitcoin Core 0.15.0 to adapt to many kinds of systems.

Usage: ./configure [OPTION]... [VAR=VALUE]...

...
Optional Features:
  --disable-option-checking  ignore unrecognized --enable/--with options
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]

  --enable-wallet         enable wallet (default is yes)

  --with-gui[=no|qt4|qt5|auto]
...
----

// The +configure+ script allows you to enable or disable certain features of +bitcoind+ through the use of the +--enable-FEATURE+ and +--disable-FEATURE+ flags, where pass:[<span class="keep-together"><code>FEATURE</code></span>] is replaced by the feature name, as listed in the help output. In this chapter, we will build the +bitcoind+ client with all the default features. We won't be using the configuration flags, but you should review them to understand what optional features are part of the client. If you are in an academic setting, computer lab restrictions may require you to install applications in your home directory (e.g., using +--prefix=$HOME+).
+configure+ 스크립트는 +--enable-FEATURE+ 와 +--disable-FEATURE+ 플래그를 사용함으로써 +bitcoind+ 의 특정 기능을 사용하거나 사용하지 못하게 할 수 있다. 이 경우, 명령어 pass:[<span class="keep-together"><code>FEATURE</code></span>] 가 도움말 출력값 (help out)에 나열되어 있는 기능 이름으로 대체된다. 3장에서는 디폴트 (default) 기능을 가진 +bitcoind+ 클라이언트를 빌드해 볼 것이다. 여기에서는 설정 플래그 (configuration flags)를 사용하지 않을 것이지만, 어떤 선택적인 기능이 클라이언트의 일부가 되는지 이해하기 위해 설정 플래그를 검토해야 한다. 학교 환경에서 실행하는 경우, 컴퓨터 실습 제한으로 홈 디렉토리에 어플리케이션을 설치해야 할 수도 있다 (예를 들어 +--prefix=$HOME+ 를 사용함).

// Here are some useful options that override the default behavior of the configure script:
다음은 configure 스크립트의 디폴트를 무시하는 유용한 옵션이다:

++++
<dl>
<dt><code>--prefix=$HOME</code></dt>
<dd><p>This overrides the default installation location (which is <em>/usr/local/</em>) for the resulting executable. Use <code>$HOME</code> to put everything in your home directory, or a different path.</p></dd>
<dd><p>이것은 기본 설치 장소를 덮어쓴다 (<em>/usr/local/</em>). 홈 디렉토리나 다른 경로에 모든 것을 같이 두기 위해 <code>$HOME</code> 를 사용하라.</p></dd>

<dt><code>--disable-wallet</code></dt>
<dd><p>This is used to disable the reference wallet implementation.</p></dd>
<dd><p>이것은 참조 지갑 구현을 불가능하게 할 때 사용한다.</p></dd>

<dt><code>--with-incompatible-bdb</code></dt>
<dd><p>If you are building a wallet, allow the use of an incompatible version of the Berkeley DB library.</p></dd>
<dd><p>지갑을 구축할 때 Berkeley DB library의 호환 불가능한 버전의 사용을 가능하게 해 준다.</p></dd>

<dt><code>--with-gui=no</code></dt>
<dd><p>Don't build the graphical user interface, which requires the Qt library. This builds server and command-line bitcoin only.</p></dd>
<dd><p>Qt library를 필요로하는 그래픽 유저 인터페이스를 구축하지 말라. 이것은 오직 서버와 명령행 비트코인을 구축한다.</p></dd>
</dl>
++++

// Next, run the +configure+ script to automatically discover all the necessary libraries and create a customized build script for your system:
다음으로 자동적으로 모든 필요한 라이브러리를 검색하고 운영체제에 맞는 빌드 스크립트 (build script)를 생성하기 위해 configure 스크립트를 가동한다.

----
$ ./configure
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /bin/mkdir -p
checking for gawk... gawk
checking whether make sets $(MAKE)... yes
...
[many pages of configuration tests follow]
...
$
----


// If all went well, the +configure+ command will end by creating the customized build scripts that will allow us to compile +bitcoind+. If there are any missing libraries or errors, the +configure+ command will terminate with an error instead of creating the build scripts. If an error occurs, it is most likely because of a missing or incompatible library. Review the build documentation again and make sure you install the missing prerequisites. Then run +configure+ again and see if that fixes the error.
여기까지 잘 진행되었다면, +configure+ 명령은 +bitcoind+ 를 컴파일링 할 수 있도록 설정된 빌드 스크립트를 생성함으로써 종료된다. 라이브러리가 누락되거나 에러가 발생하는 경우, +configure+ 명령은 빌드 스크립트를 생성하는 대신 에러가 난 채로 종료된다. 에러가 발생한다면 대부분 라이브러리가 누락되거나 호환 불가능한 경우이다. 빌드 문서를 재검토하고 누락된 전제 조건을 확인하라. 그 후 +configure+ 를 재실행하고 에러가 고쳐졌는지 확인하라.

// ==== Building the Bitcoin Core Executables
==== 비트코인 코어 실행파일 (executables) 빌드

// ((("Bitcoin Core", "compiling from source code", "core executables")))((("core executables", seealso="Bitcoin Core")))Next, you will compile the source code, a process that can take up to an hour to complete, depending on the speed of your CPU and available memory. During the compilation process you should see output every few seconds or every few minutes, or an error if something goes wrong. If an error occurs, or the compilation process is interrupted, it can be resumed any time by typing +make+ again. Type ++**make**++ to start compiling the executable application:
다음은 소스코드를 컴파일링 할 것이며 이 과정은 CPU와 가용 메모리에 따라 완료까지 최대 1시간 정도 걸릴 수 있다. 컴파일링 과정 동안 몇 초 단위 혹은 몇 분 단위로 출력값을 관찰해야 한다. 그렇지 않으면 어떤 과정이 잘못되어 에러가 발생할 수 있다. 에러가 발생하거나 컴파일 과정이 중단되는 경우라면 +make+ 를 다시 입력하여 언제든지 다시 재개 할 수 있다. 실행파일 컴파일을 시작하기 위해서 ++**make**++ 를 입력하라.

----
$ make
Making all in src
  CXX      crypto/libbitcoinconsensus_la-hmac_sha512.lo
  CXX      crypto/libbitcoinconsensus_la-ripemd160.lo
  CXX      crypto/libbitcoinconsensus_la-sha1.lo
  CXX      crypto/libbitcoinconsensus_la-sha256.lo
  CXX      crypto/libbitcoinconsensus_la-sha512.lo
  CXX      libbitcoinconsensus_la-hash.lo
  CXX      primitives/libbitcoinconsensus_la-transaction.lo
  CXX      libbitcoinconsensus_la-pubkey.lo
  CXX      script/libbitcoinconsensus_la-bitcoinconsensus.lo
  CXX      script/libbitcoinconsensus_la-interpreter.lo

[... many more compilation messages follow ...]

$
----

// On a fast system with more than one CPU, you might want to set the number of parallel compile jobs. For instance, +make -j 2+ will use two cores if they are available. If all goes well, Bitcoin Core is now compiled. You should run the unit test suite with +make check+ to ensure the linked libraries are not broken in obvious ways. The final step is to install the various executables on your system using the +make install+ command. You may be prompted for your user password, because this step requires administrative privileges:
하나 이상의 CPU를 가진 고속 시스템에서는 병렬 컴파일 작업의 수를 설정하고 싶을 것이다. 예를 들어 +make -j 2+ 는 가능하다면 두 개의 코어를 사용하게 한다. 모든 것이 정상적으로 작동한다면, 비트코인 코어는 이제 컴파일되었다. 링크도니 라이브러리가 명확하게 손상되지 않았다는 것을 확인하기 위해서 +make check+ 를 사용하여 유닛 테스트 수트 (suite)를 진행하여야 한다. 마지막 단계는 +make install+ 명령을 사용하여 시스템에 다양한 실행파일을 설치하는 것이다. 이 단계는 관리자 권한이 필요하기 때문에 사용자 암호를 묻는 메시지가 나타날 수 있다:

----
$ make check && sudo make install
Password:
Making install in src
 ../build-aux/install-sh -c -d '/usr/local/lib'
libtool: install: /usr/bin/install -c bitcoind /usr/local/bin/bitcoind
libtool: install: /usr/bin/install -c bitcoin-cli /usr/local/bin/bitcoin-cli
libtool: install: /usr/bin/install -c bitcoin-tx /usr/local/bin/bitcoin-tx
...
$
----

// ((("", startref="BCsource03")))The default installation of +bitcoind+ puts it in _/usr/local/bin_. You can confirm that Bitcoin Core is correctly installed by asking the system for the path of the executables, as follows:
((("", startref="BCsource03")))+bitcoind+ 의 기본 설치경로는 _/usr/local/bin_ 이다. 다음과 같이 실파일 경로에 대해 시스템에 질문을 해서 비트코인 코어가 정확하게 설치되었는지 확인할 수 있다.

----
$ which bitcoind
/usr/local/bin/bitcoind

$ which bitcoin-cli
/usr/local/bin/bitcoin-cli
----

// === Running a Bitcoin Core Node
비트코인 코어 노드 실행하기

// ((("Bitcoin Core", "running core nodes", id="BCnode03")))((("bitcoin nodes", "running core nodes", id="BNcore03")))Bitcoin's peer-to-peer network is composed of network "nodes," run mostly by volunteers and some of the businesses that build bitcoin applications. Those running bitcoin nodes have a direct and authoritative view of the bitcoin blockchain, with a local copy of all the transactions, independently validated by their own system. By running a node, you don't have to rely on any third party to validate a transaction. Moreover, by running a bitcoin node you contribute to the bitcoin network by making it more robust.
비트코인 P2P 네트워크는 네트워크 "노드"로 구성되며 주로 참여자와 일부 비트코인 어플리케이션을 구축하는 회사에 의해 실행된다. 실행중인 비트코인 노드들은 비트코인 블록체인에 대한 직관적이고 권위적인 견해를 가지고 있으며 자체 시스템에 의해 독립적으로 검증된 모든 거래 내역의 로컬 복사본을 가진다. 노드를 실행함으로써 거래를 검증하기 위해 제 3자 (third party)에게 의존할 필요가 없다. 또한 노드를 실행함으로써 비트코인 네트워크에 기여하여 비트코인 네트워크를 더 강력하게 만들 수 있다.

// Running a node, however, requires a permanently connected system with enough resources to process all bitcoin transactions. Depending on whether you choose to index all transactions and keep a full copy of the blockchain, you may also need a lot of disk space and RAM. As of early 2018, a full-index node needs 2 GB of RAM and a minimum of 160 GB of disk space (see https://blockchain.info/charts/blocks-size[]). Bitcoin nodes also transmit and receive bitcoin transactions and blocks, consuming internet bandwidth. If your internet connection is limited, has a low data cap, or is metered (charged by the gigabit), you should probably not run a bitcoin node on it, or run it in a way that constrains its bandwidth (see <<constrained_resources>>).
그러나 노드를 실행하는 것은 모든 비트코인 거래를 처리할 수 있는 충분한 자원이 있는 영구적으로 연결된 시스템이 필요하다. 모든 거래를 인덱싱할 지 또는 블록체인의 전체 복사본을 유지할 지에 따라 많은 디스크 공간과 램 (RAM)이 필요할 수 있다. 2018년 초기에는 풀 인덱스 노드는 2 GB의 램과 최소 160 GB의 디스크 공간을 필요로 한다 (https://blockchain.info/charts/blocks-size[] 를 참고하라). 또한 비트코인 노드는 인터넷 대역폭을 소모하여 비트코인 거래와 블록을 전송하고 수신한다. 인터넷 연결이 제한적이거나 데이터 용량이 낮거나 제한된 경우 (기가바이트 단위로 청구됨), 비트코인 노드를 실행하지 말아야 하거나 대역폭을 제한하는 방식으로 실행해야 한다 (<<constrained_resources>> 를 참고하라).

[TIP]
====
// ((("warnings and cautions", "core node resource requirements")))((("resource requirements")))Bitcoin Core keeps a full copy of the blockchain by default, with every transaction that has ever occurred on the bitcoin network since its inception in 2009. This dataset is dozens of gigabytes in size and is downloaded incrementally over several days or weeks, depending on the speed of your CPU and internet connection. Bitcoin Core will not be able to process transactions or update account balances until the full blockchain dataset is downloaded. Make sure you have enough disk space, bandwidth, and time to complete the initial synchronization. You can configure Bitcoin Core to reduce the size of the blockchain by discarding old blocks (see <<constrained_resources>>), but it will still download the entire dataset before discarding data.
비트코인 코어는 2009년 처음 시작된 이후 비트코인 네트워크에서 발생하는 모든 거래 내역과 함께 기본적으로 블록체인 전체 복사본을 유지한다. 이 데이터베이스는 수 십 기가바이트 크기이며 CPU 및 인터넷 연결 속도에 따라 며칠 또는 몇 주에 걸쳐 점진적으로 다운로드된다. 비트코인 코어는 전체 블록체인 데이터 세트가 다운로드 될 때까지 거래를 처리하거나 계좌 잔고를 갱신할 수 없다. 충분한 디스크 공간, 대역폭 및 초기 동기화를 완료하기까지 충분한 시간이 있는지 반드시 확인하라. 이전 블록을 폐기하여 블록체인 크기를 줄인 비트코인 코어를 구성할 수 있지만 (<<constrained_resources>> 를 참고하라), 여전히 데이터를 폐기하기 전에 전체 데이터 세트를 다운로드 해야한다.
====

// Despite these resource requirements, thousands of volunteers run bitcoin nodes. Some are running on systems as simple as a Raspberry Pi (a $35 USD computer the size of a pack of cards). Many volunteers also run bitcoin nodes on rented servers, usually some variant of Linux. A _Virtual Private Server_ (VPS) or _Cloud Computing Server_ instance can be used to run a bitcoin node. Such servers can be rented for $25 to $50 USD per month from a variety of providers.
이러한 자원이 필요함에도 불구하고 수천명의 사람들이 자율적으로 비트코인 노드를 운영한다. 일부는 라즈베리 파이 (카드 한 묶음 크기의 35 달러짜리 컴퓨터)와 같은 단순한 시스템에서 실행한다. 또한 많은 참여자들은 일반적으로 리눅스의 변형인 임대 서버에서 비트코인 노드를 실행한다. _Virtual Private Server_ (VPS) 또는 _Cloud Computing Server_ 인스턴스를 사용하여 비트코인 노드를 실행할 수 있다. 다양한 회사들이 이러한 서버를 월 25 - 50 달러에 임대한다.

// Why would you want to run a node? Here are some of the most common reasons:
왜 노드를 실행하고 싶어할까? 다음은 이 질문에 대한 가장 일반적인 답변들이다.

// * If you are developing bitcoin software and need to rely on a bitcoin node for programmable (API) access to the network and blockchain.
* 비트코인 소프트웨어를 개발중이고 네트워크 및 블록체인 API 접근을 위해 비트코인 노드를 사용해야 하는 경우.

// * If you are building applications that must validate transactions according to bitcoin's consensus rules. Typically, bitcoin software companies run several nodes.
* 비트코인 합의 규칙에 따라 거래를 검증해야하는 어플리케이션을 구축하는 경우. 일반적으로 비트코인 소프트웨어 회사는 여러 노드를 운영한다.

// * If you want to support bitcoin. Running a node makes the network more robust and able to serve more wallets, more users, and more transactions.
* 비트코인을 지원하고 싶은 경우. 노드를 운영하는 것은 네트워크를 더 강력하게 만들고 더 많은 지갑, 더 많은 사용자 및 더 많은 거래를 처리할 수 있도록 한다.

// * If you do not want to rely on any third party to process or validate your transactions.
* 거래를 처리하거나 검증할 때 제 3자에 의존하는 것을 원하지 않는 경우.

// If you're reading this book and interested in developing bitcoin software, you should be running your own node.
이 책을 읽고 비트코인 소프트웨어 개발에 관심이 있다면, 반드시 스스로 노드를 실행해봐야 한다.

// ==== Configuring the Bitcoin Core Node
==== 비트코인 코어 노드 구성

// ((("Bitcoin Core", "running core nodes", "configuring")))((("warnings and cautions", "password creation")))((("passwords", "creating")))((("security", "passwords")))Bitcoin Core will look for a configuration file in its data directory on every start. In this section we will examine the various configuration options and set up a configuration file. To locate the configuration file, run +bitcoind -printtoconsole+ in your terminal and look for the first couple of lines.
((("Bitcoin Core", "running core nodes", "configuring")))((("warnings and cautions", "password creation")))((("passwords", "creating")))((("security", "passwords")))비트코인 코어는 시작할 때마다 데이터 디렉토리에서 구성 파일을 찾는다. 이번에는 다양한 구성 옵션을 검토하고 구성 파일을 설정해 볼 것이다. 구성 파일을 찾으려면 터미널에서 +bitcoind -printtoconsole+ 를 실행하고 처음 몇 줄을 찾으면 된다.

----
$ bitcoind -printtoconsole
Bitcoin version v0.15.0
Using the 'standard' SHA256 implementation
Using data directory /home/ubuntu/.bitcoin/
Using config file /home/ubuntu/.bitcoin/bitcoin.conf
...
[a lot more debug output]
...
----

// You can hit Ctrl-C to shut down the node once you determine the location of the config file. Usually the configuration file is inside the _.bitcoin_ data directory under your user's home directory. Open the configuration file in your preferred editor.
구성 파일의 위치를 결정한 다음에는 Ctrl-C 를 눌러 노드를 종료할 수 있다. 보통 구성 파일은 사용자의 홈 디렉토리 아래 _.bitcoin_ 데이터 디렉토리 내에 있다. 선호하는 편집기에서 구성 파일을 열면된다.

// Bitcoin Core offers more than 100 configuration options that modify the behavior of the network node, the storage of the blockchain, and many other aspects of its operation. To see a listing of these options, run +bitcoind  --help+:
비트코인 코어는 네트워크 노드의 동작, 블록체인의 저장 및 기타 작동시 여러 측면을 수정할 수 있는 100개 이상의 구성 옵션을 제공한다. 이러한 옵션 목록을 확인하려면 +bitcoind  --help+ 를 실행하라:

----
$ bitcoind --help
Bitcoin Core Daemon version v0.15.0

Usage:
  bitcoind [options]                     Start Bitcoin Core Daemon

Options:

  -?
       Print this help message and exit

  -version
       Print version and exit

  -alertnotify=<cmd>
       Execute command when a relevant alert is received or we see a really
       long fork (%s in cmd is replaced by message)
...
[many more options]
...

  -rpcthreads=<n>
       Set the number of threads to service RPC calls (default: 4)
----

// ((("configuration options", seealso="Bitcoin Core")))Here are some of the most important options that you can set in the configuration file, or as command-line parameters to +bitcoind+:
((("configuration options", seealso="Bitcoin Core")))다음은 구성 파일에서 설정할 수 있는 매우 중요한 옵션 중 일부 또는 +bitcoind+ 에 대한 명령행 매개변수를 소개한 것이다.

// alertnotify:: Run a specified command or script to send emergency alerts to the owner of this node, usually by email.
alertnotify:: 주로 이메일을 통해 노드 소유자에게 비상 연락을 보내기 위한 지정된 명령 또는 스크립트를 실행.

// conf:: An alternative location for the configuration file. This only makes sense as a command-line parameter to +bitcoind+, as it can't be inside the configuration file it refers to.
conf:: 구성 파일에 대한 대체 위치. 참조하는 구성 파일 내에 존재할 수 없기 때문에 +bitcoind+ 에 대한 명령행 매개변수로만 의미가 있다.

// datadir:: Select the directory and filesystem in which to put all the blockchain data. By default this is the _.bitcoin_ subdirectory of your home directory. Make sure this filesystem has several gigabytes of free space.
datadir:: 모든 블록체인 데이터를 입력할 디렉토리나 파일시스템 선택. 기본적으로 홈 디렉토리의 _.bitcoin_ 서브 디렉토리다. 이 파일시스템에 몇 기가바이트의 여유 공간이 있는지 확인하라.

// prune:: Reduce the disk space requirements to this many megabytes, by deleting old blocks. Use this on a resource-constrained node that can't fit the full blockchain.
prune:: 오래된 블록을 삭제하여 요구하는 디스크 공간을 메가바이트 배수 단위로 줄인다. 전체 블록체인에 적합하지 않는 리소스가 제한된 노드에서 이 옵션을 사용하라.

// txindex:: Maintain an index of all transactions. This means a complete copy of the blockchain that allows you to programmatically retrieve any transaction by ID.
txindex:: 모든 거래의 인덱스 유지. 즉, ID로 모든 거래를 프로그래밍 방식으로 검색할 수 있게 해 주는 블록체인의 완전한 복사본을 의미한다.

// dbcache:: The size of the UTXO cache. The default is 300 MiB. Increase this on high-end hardware and reduce the size on low-end hardware to save memory at the expense of slow disk IO.
dbcache:: UTXO 캐시의 크기. 기본값은 300 MiB 이다. 고급 하드웨어에서는 이를 증가시키고 저가형 하드웨어에서는 메모리를 절약하기 위해 디스크 IO 대신 이 크기를 감소시킨다.

// maxconnections:: Set the maximum number of nodes from which to accept connections. Reducing this from the default will reduce your bandwidth consumption. Use if you have a data cap or pay by the gigabyte.
maxconnections:: 연결을 허용할 최대 노드 수 설정. 기본값에서 줄이면 대역폭 소비가 줄어들게 된다. 데이터 제한 용량이 있거나 기가바이트 단위로 지불하는 경우에 이 기능을 사용하라.

// maxmempool:: Limit the transaction memory pool to this many megabytes. Use it to reduce memory use on memory-constrained nodes.
maxmempool:: 거래 내역 메모리 풀을 메가바이트 배수 단위로 제한. 메모리가 제한된 노드에서 메모리 사용을 줄이기 위해 사용하라.

// maxreceivebuffer/maxsendbuffer:: Limit per-connection memory buffer to this many multiples of 1000 bytes. Use on memory-constrained nodes.
maxreceivebuffer/maxsendbuffer:: 연결당 메모리 버퍼를 1000 바이트의 배수 단위로 제한. 메모리 제한 노드에서 사용하라.

// minrelaytxfee:: Set the minimum fee rate for transaction you will relay. Below this value, the transaction is treated nonstandard, rejected from the transaction pool and not relayed.
minrelaytxfee:: 중계될 거래에 대한 최소 요금을 설정. 이 값 아래에서 이루어지는 거래는 비표준으로 처리되며 거래 풀에서 거부되고 중계되지 않는다.


[[txindex]]
// .Transaction Database Index and txindex Option
.거래 데이터베이스 인덱스 (Transaction Database Index) 및 txindex 옵션
****
// ((("Bitcoin Core", "running core nodes", "database options")))((("transactions", "database configuration options")))((("txindex option")))((("full indexing option")))By default, Bitcoin Core builds a database containing _only_ the transactions related to the user's wallet. If you want to be able to access _any_ transaction with commands like +getrawtransaction+ (see <<exploring_and_decoding_transanctions>>), you need to configure Bitcoin Core to build a complete transaction index, which can be achieved with the +txindex+ option. Set +txindex=1+ in the Bitcoin Core configuration file. If you don't set this option at first and later set it to full indexing, you need to restart +bitcoind+ with the +-reindex+ option and wait for it to rebuild the index.
기본적으로 비트코인 코어는 _오직_ 사용자의 지갑과 관련된 거래만 포함하는 데이터베이스를 구축한다. +getrawtransaction+ ( <<exploring_and_decoding_transanctions>> 를 참고하라)와 같은 명령으로 이루어진 _어떤_ 거래에 접근하고 싶다면, 완전한 거래 인덱스를 구축하기 위해 +txindex+ 옵션을 사용하여 비트코인 코어를 구성해야 한다. 비트코인 코어 구성 파일에서 +txindex=1+ 로 설정하라. 처음에 이 옵션을 설정하지 않았고 이후에 풀 인덱싱을 위해 옵션을 설정하였다면, +-reindex+ 옵션을 사용하여 +bitcoind+ 를 재시작하여야 하며 인덱스를 재구축할 때까지 기다려야한다.
****

// <<full_index_node>> shows how you might combine the preceding options, with a fully indexed node, running as an API backend for a bitcoin application.
<<full_index_node>> 는 앞에서 설명한 옵션들을 비트코인 어플리케이션의 API 백엔드로 실행되는 완전히 인덱스된 노드와 결합하는 방법을 보여준다.

[[full_index_node]]
// .Sample configuration of a full-index node
.풀 인덱스 노드 구성 예시
====
----
alertnotify=myemailscript.sh "Alert: %s"
datadir=/lotsofspace/bitcoin
txindex=1
----
====

// <<constrained_resources>> shows a resource-constrained node running on a smaller server.
<<constrained_resources>> 는 소규모 서버에서 실행되는 리소스 제한 노드를 보여준다.

[[constrained_resources]]
// .Sample configuration of a resource-constrained system
.리소스 제한 시스템의 구성 예시
====
----
alertnotify=myemailscript.sh "Alert: %s"
maxconnections=15
prune=5000
dbcache=150
maxmempool=150
maxreceivebuffer=2500
maxsendbuffer=500
----
====

// Once you've edited the configuration file and set the options that best represent your needs, you can test +bitcoind+ with this configuration. Run Bitcoin Core with the option +printtoconsole+ to run in the foreground with output to the console:
구성 파일을 편집하고 필요로 하는 옵션을 설정하면, 이 구성으로 +bitcoind+ 를 테스트 할 수 있다. +printtoconsole+ 옵션으로 비트코인 코어를 실행하면 콘솔 출력으로 전경 (foreground)에서 실행된다.

----
$ bitcoind -printtoconsole

Bitcoin version v0.15.0
InitParameterInteraction: parameter interaction: -whitelistforcerelay=1 -> setting -whitelistrelay=1
Assuming ancestors of block 0000000000000000003b9ce759c2a087d52abc4266f8f4ebd6d768b89defa50a have valid signatures.
Using the 'standard' SHA256 implementation
Default data directory /home/ubuntu/.bitcoin
Using data directory /lotsofspace/.bitcoin
Using config file /home/ubuntu/.bitcoin/bitcoin.conf
Using at most 125 automatic connections (1048576 file descriptors available)
Using 16 MiB out of 32/2 requested for signature cache, able to store 524288 elements
Using 16 MiB out of 32/2 requested for script execution cache, able to store 524288 elements
Using 2 threads for script verification
HTTP: creating work queue of depth 16
No rpcpassword set - using random cookie authentication
Generated RPC authentication cookie /lotsofspace/.bitcoin/.cookie
HTTP: starting 4 worker threads
init message: Verifying wallet(s)...
Using BerkeleyDB version Berkeley DB 4.8.30: (April  9, 2010)
Using wallet wallet.dat
CDBEnv::Open: LogDir=/lotsofspace/.bitcoin/database ErrorFile=/lotsofspace/.bitcoin/db.log
scheduler thread start
Cache configuration:
* Using 250.0MiB for block index database
* Using 8.0MiB for chain state database
* Using 1742.0MiB for in-memory UTXO set (plus up to 286.1MiB of unused mempool space)
init message: Loading block index...
Opening LevelDB in /lotsofspace/.bitcoin/blocks/index
Opened LevelDB successfully

[... more startup messages ...]
----

// You can hit Ctrl-C to interrupt the process once you are satisfied that it is loading the correct settings and running as you expect.
올바른 설정으로 로딩하고 예상한 대로 실행 중이라면 Ctrl-C 를 눌러 이 과정을 중단할 수 있다.

// To run Bitcoin Core in the background as a process, start it with the +daemon+ option, as +bitcoind -daemon+.
백그라운드에서 Bitcoin Core를 프로세스로 실행하려면, +bitcoind -daemon+ 과 같이 +daemon+ 옵션으로 시작하라.

// To monitor the progress and runtime status of your bitcoin node, use the command +bitcoin-cli getblockchaininfo+:
비트코인 노드의 진행 상태 및 런타임 상태를 모니터링하려면 +bitcoin-cli getblockchaininfo+ 명령을 사용하라.

----
$ bitcoin-cli getblockchaininfo
----

[source,json]
----
{
  "chain": "main",
  "blocks": 0,
  "headers": 83999,
  "bestblockhash": "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
  "difficulty": 1,
  "mediantime": 1231006505,
  "verificationprogress": 3.783041623201835e-09,
  "chainwork": "0000000000000000000000000000000000000000000000000000000100010001",
  "pruned": false,
  [...]
}
----

// This shows a node with a blockchain height of 0 blocks and 83999 headers. The node currently fetches the block headers of the best chain and afterward continues to download the full blocks.
이것은 블록체인 높이가 0 블록이고 헤더가 83999인 노드를 보여준다. 노드는 현재 가장 좋은 체인의 블록 헤더를 가져온 후 전체 블록을 계속해서 다운로드한다.

// Once you are happy with the configuration options you have selected, you should add bitcoin to the startup scripts in your operating system, so that it runs continuously and restarts when the operating system restarts. You will find a number of example startup scripts for various operating systems in bitcoin's source directory under _contrib/init_ and a _README.md_ file showing which system uses which script.((("", startref="BCnode03")))((("", startref="BNcore03")))
선택한 구성 옵션에 만족한다면 운영 체제의 시작 스크립트에 비트코인을 추가하여 비트코인이 지속적으로 실행되고 운영 체제가 재시작될 때 동시에 재시작될 수 있도록 하여야 한다. 시스템이 어떤 스크립트를 사용하는가를 보여주는 비트코인 소스 스크립트의 _contrib/init_ 및 _README.md_ 파일에서 다양한 운영체제용 시작 스크립트의 많은 예를 찾아볼 수 있다.((("", startref="BCnode03")))((("", startref="BNcore03")))

// === Bitcoin Core Application Programming Interface (API)
=== 비트코인 코어 응용 프로그램 인터페이스 (API)

// ((("Bitcoin Core", "Bitcoin Core API", id="BCapi03")))The Bitcoin Core client implements a JSON-RPC interface that can also be accessed using the command-line helper +bitcoin-cli+. The command line allows us to experiment interactively with the capabilities that are also available programmatically via the API. ((("Bitcoin Core", "Bitcoin Core API", "RPC commands")))To start, invoke the +help+ command to see a list of the available bitcoin RPC commands:
((("Bitcoin Core", "Bitcoin Core API", id="BCapi03")))비트코인 코어 클라이언트는 JSON-RPC 인터페이스를 실행하며 명령행 헬퍼 (helper)인 +bitcoin-cli+ 를 사용하여 인터페이스에 접속할 수도 있다. 명령행을 이용하면 API를 통해 프로그램적으로 사용 가능한 기능을 활용해 양방향으로 실험이 가능하다. ((("Bitcoin Core", "Bitcoin Core API", "RPC commands")))우선 사용 가능한 비트코인 RPC 명령어의 목록을 확인하기 위해 +help+ 명령어를 작동해 보자.

[[bitcoind_commands]]

----
$ bitcoin-cli help
addmultisigaddress nrequired ["key",...] ( "account" )
addnode "node" "add|remove|onetry"
backupwallet "destination"
createmultisig nrequired ["key",...]
createrawtransaction [{"txid":"id","vout":n},...] {"address":amount,...}
decoderawtransaction "hexstring"
...
...
verifymessage "bitcoinaddress" "signature" "message"
walletlock
walletpassphrase "passphrase" timeout
walletpassphrasechange "oldpassphrase" "newpassphrase"
----

// Each of these commands may take a number of parameters. To get additional help, a detailed description, and information on the parameters, add the command name after +help+. For example, to see help on the +getblockhash+ RPC command:
이 명령들 각각은 많은 매개변수를 가질 수 있다. 매개변수에 대한 추가적인 도움말, 자세한 설명 및 정보가 필요하다면 +help+ 다음에 명령어 이름을 추가하라. 예를 들어 +getblockhash+ RPC 명령에 대한 도움말은 다음과 같이 확인할 수 있다.

----
$ bitcoin-cli help getblockhash
getblockhash height

Returns hash of block in best-block-chain at height provided.

Arguments:
1. height         (numeric, required) The height index

Result:
"hash"         (string) The block hash

Examples:
> bitcoin-cli getblockhash 1000
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockhash", "params": [1000] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
----

// At the end of the help information you will see two examples of the RPC command, using the +bitcoin-cli+ helper or the HTTP client +curl+. These examples demonstrate how you might call the command. Copy the first example and see the result:
도움말 정보 끝에서는 +bitcoin-cli+ 헬퍼나 HTTP 클라이언트 +curl+ 을 활용한 RPC 명령의 두 가지 예를 확인할 수 있다. 이 예들은 사용자가 명령을 호출하는 방법을 보여준다. 첫 번째 예를 복사하여 결과를 확인하라.

----
$ bitcoin-cli getblockhash 1000
00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09
----

// The result is a block hash, which is described in more detail in the following chapters. But for now, this command should return the same result on your system, demonstrating that your Bitcoin Core node is running, is accepting commands, and has information about block 1000 to return to you.
다음 장에서 자세하게 설명될 블록해시가 결과인 것을 확인할 수 있다. 그러나 현재부터는 이 명령은 비트코인 코어 노드가 실행 중이며, 명령을 수락하고 블록 1000에 대한 정보가 반환된다는 것을 증명하면서 시스템에서 항상 동일한 결과를 반환해야 한다.

// In the next sections we will demonstrate some very useful RPC commands and their expected output.
다음 섹션에서는 일부 유용한 RPC 명령과 예상되는 출력물을 살펴볼 것이다.

// ==== Getting Information on the Bitcoin Core Client Status
비트코인 코어 클라이언트 상태에 대한 정보 얻기

// ((("Bitcoin Core", "Bitcoin Core API", "status information")))Bitcoin Core provides status reports on diffent modules through the JSON-RPC interface. The most important commands include +getblockchaininfo+, +getmempoolinfo+, +getnetworkinfo+ and +getwalletinfo+.
((("Bitcoin Core", "Bitcoin Core API", "status information")))비트코인 코어는 JSON-RPC interface를 통해 서로 다른 모듈에 대한 상태 리포트를 제공한다. 가장 중요한 명령에는 +getblockchaininfo+, +getmempoolinfo+, +getnetworkinfo+ 및 +getwalletinfo+ 등이 있다.

// Bitcoin's +getblockchaininfo+ RPC command was introduced earlier. The +getnetworkinfo+ command displays basic information about the status of the bitcoin network node. Use +bitcoin-cli+ to run it:
비트코인의 +getblockchaininfo+ RPC 명령어는 더 일찍 소개되었다. +getnetworkinfo+ 명령어는 비트코인 네트워크 노드 상태에 대한 기본적인 정보를 보여준다. +bitcoin-cli+ 를 이용하여 이 명령어를 실행해 보자.

----
$ bitcoin-cli getnetworkinfo
----
[source,json]
----
  "version": 150000,
  "subversion": "/Satoshi:0.15.0/",
  "protocolversion": 70015,
  "localservices": "000000000000000d",
  "localrelay": true,
  "timeoffset": 0,
  "networkactive": true,
  "connections": 8,
  "networks": [
    ...
    detailed information about all networks (ipv4, ipv6 or onion)
    ...
  ],
  "relayfee": 0.00001000,
  "incrementalfee": 0.00001000,
  "localaddresses": [
  ],
  "warnings": ""
}

----

// The data is returned in JavaScript Object Notation (JSON), a format that can easily be "consumed" by all programming languages but is also quite human-readable. Among this data we see the version numbers for the bitcoin software client (150000) and bitcoin protocol (70015).  We see the current number of connections (8) and various information about the bitcoin network and the settings related to this client.
데이터는 자바스크립트 객체 표기법 (JavaScript Object Notation, JSON)으로 결과값을 보여준다. JSON은 모든 프로그래밍 언어로 쉽게 "사용 (consumed)" 가능하고 가독성이 좋다는 장점이 있다.

[TIP]
====
// It will take some time, perhaps more than a day, for the +bitcoind+ client to "catch up" to the current blockchain height as it downloads blocks from other bitcoin clients. You can check its progress using +getblockchaininfo+ to see the number of known blocks.
+bitcoind+ 클라이언트가 다른 비트코인 클라이언트로부터 블록을 다운로드 받으면서 현재의 블록체인 높이를 "따라잡는 (catch up)" 작업은 어느 정도의 시간이 소요되며 하루 이상이 걸릴 수도 있다. 현재까지 다운로드된 블록 수를 알아보려면 +getblockchaininfo+ 를 사용하여 현재 진행상황을 확인할 수 있다.
====

[[exploring_and_decoding_transanctions]]
// ==== Exploring and Decoding Transactions
==== 거래내역 살펴보기 및 디코딩하기

// ((("Bitcoin Core", "Bitcoin Core API", "exploring and decoding transactions")))((("transactions", "exploring with Bitcoin Core API")))Commands: +getrawtransaction+, +decoderawtransaction+
((("Bitcoin Core", "Bitcoin Core API", "exploring and decoding transactions")))((("transactions", "exploring with Bitcoin Core API")))명령어: +getrawtransaction+, +decoderawtransaction+

// In <<cup_of_coffee>>, ((("use cases", "buying coffee", id="alicethree")))Alice bought a cup of coffee from Bob's Cafe. Her transaction was recorded on the blockchain with transaction ID (+txid+) +0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2+. Let's use the API to retrieve and examine that transaction by passing the transaction ID as a parameter:
<<cup_of_coffee>> 에서, ((("use cases", "buying coffee", id="alicethree")))앨리스는 밥의 까페에서 커피 한 잔을 구매했다. 앨리스의 거래 내역은 거래 ID (+txid+) +0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2+ 로 블록체인에 기록되었다. API를 사용하여 거래 ID를 매개변수로 전달하여 해당 거래를 검색하고 살펴보자.

++++
<pre data-type="programlisting">
$ bitcoin-cli getrawtransaction 0627052b6f28912f2703066a912ea577f2ce4da4caa5a&#x21b5;
5fbd8a57286c345c2f2

0100000001186f9f998a5aa6f048e51dd8419a14d8a0f1a8a2836dd734d2804fe65fa35779000&#x21b5;
000008b483045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1deccbb6498c75c4&#x21b5;
ae24cb02204b9f039ff08df09cbe9f6addac960298cad530a863ea8f53982c09db8f6e3813014&#x21b5;
10484ecc0d46f1918b30928fa0e4ed99f16a0fb4fde0735e7ade8416ab9fe423cc54123363767&#x21b5;
89d172787ec3457eee41c04f4938de5cc17b4a10fa336a8d752adfffffffff0260e3160000000&#x21b5;
0001976a914ab68025513c3dbd2f7b92a94e0581f5d50f654e788acd0ef8000000000001976a9&#x21b5;
147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac00000000
</pre>
++++


[TIP]
====
// ((("transaction IDs (txd)")))((("malleability")))A transaction ID is not authoritative until a transaction has been confirmed. Absence of a transaction hash in the blockchain does not mean the transaction was not processed. This is known as "transaction malleability," because transaction hashes can be modified prior to confirmation in a block. After confirmation, the +txid+ is immutable and authoritative.
((("transaction IDs (txd)")))((("malleability")))거래가 승인되기 전까지 거래 ID는 효력을 발휘하지 못한다. 블록체인 내 거래 해시가 존재하지 않는다고 해서 거래가 진행되지 않았음을 의미하는 것은 아니다. 이를 "거래 가변성 (transaction malleability)" 이라고 하며, 이는 한 블록 내에서 승인 전 거래 해시가 변경될 수 있기 때문이다. 승인 후에는 +txid+ 는 변경될 수 없으며 신뢰할 수 있다.
====

// The command +getrawtransaction+ returns a serialized transaction in hexadecimal notation. To decode that, we use the +decoderawtransaction+ command, passing the hex data as a parameter. You can copy the hex returned by +getrawtransaction+ and paste it as a parameter to +decoderawtransaction+:
+getrawtransaction+ 명령어는 연속적인 거래를 16 진법 (hexadecimal notation)으로 반환한다. 이를 해독하려면 +decoderawtransaction+ 명령어를 사용하여 16 진수 데이터를 매개변수로 전달하면 된다. +getrawtransaction+ 명령어로 반환된 값을 복사하여 +decoderawtransaction+ 의 첫 번째 매개변수로 붙여 넣을 수 있다.

++++
<pre data-type="programlisting">
$ bitcoin-cli decoderawtransaction 0100000001186f9f998a5aa6f048e51dd8419a14d8&#x21b5;
a0f1a8a2836dd734d2804fe65fa35779000000008b483045022100884d142d86652a3f47ba474&#x21b5;
6ec719bbfbd040a570b1deccbb6498c75c4ae24cb02204b9f039ff08df09cbe9f6addac960298&#x21b5;
cad530a863ea8f53982c09db8f6e381301410484ecc0d46f1918b30928fa0e4ed99f16a0fb4fd&#x21b5;
e0735e7ade8416ab9fe423cc5412336376789d172787ec3457eee41c04f4938de5cc17b4a10fa&#x21b5;
336a8d752adfffffffff0260e31600000000001976a914ab68025513c3dbd2f7b92a94e0581f5&#x21b5;
d50f654e788acd0ef8000000000001976a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a8&#x21b5;
88ac00000000

</pre>
++++

++++
<pre data-type="programlisting" data-code-language="json">
{
  "txid": "0627052b6f28912f2703066a912ea577f2ce4da4caa5a5fbd8a57286c345c2f2",
  "size": 258,
  "version": 1,
  "locktime": 0,
  "vin": [
    {
      "txid": "7957a35fe64f80d234d76d83a2...8149a41d81de548f0a65a8a999f6f18",
      "vout": 0,
      "scriptSig": {
        "asm":"3045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1decc...",
        "hex":"483045022100884d142d86652a3f47ba4746ec719bbfbd040a570b1de..."
      },
      "sequence": 4294967295
    }
  ],
  "vout": [
    {
      "value": 0.01500000,
      "n": 0,
      "scriptPubKey": {
        "asm": "OP_DUP OP_HASH160 ab68...5f654e7 OP_EQUALVERIFY OP_CHECKSIG",
        "hex": "76a914ab68025513c3dbd2f7b92a94e0581f5d50f654e788ac",
        "reqSigs": 1,
        "type": "pubkeyhash",
        "addresses": [
          "1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA"
        ]
      }
    },
    {
      "value": 0.08450000,
      "n": 1,
      "scriptPubKey": {
        "asm": "OP_DUP OP_HASH160 7f9b1a...025a8 OP_EQUALVERIFY OP_CHECKSIG",
        "hex": "76a9147f9b1a7fb68d60c536c2fd8aeaa53a8f3cc025a888ac",
        "reqSigs": 1,
        "type": "pubkeyhash",
        "addresses": [
          "1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK"
        ]
      }
    }
  ]
}

</pre>
++++

// The transaction decode shows all the components of this transaction, including the transaction inputs and outputs. In this case we see that the transaction that credited our new address with 15 millibits used one input and generated two outputs. The input to this transaction was the output from a previously confirmed transaction (shown as the vin +txid+ starting with +7957a35fe+). The two outputs correspond to the 15 millibit credit and an output with change back to the sender.
거래 디코드 (decode)는 거래의 입력값과 출력값을 포함하여 거래의 모든 구성 요소들을 보여준다. 이 경우에는 새로운 주소로 15 밀리비트를 입금하는 거래에서 하나의 입력값을 사용해서 두 개의 출력값이 생성된 것을 볼 수 있다. 이 거래의 입력값은 이전에 승인된 거래에서 나온 출력값이다 (+7957a35fe+ 로 시작하는 vin +txid+). 두 개의 출력값은 15 밀리비트 입금액과 송금인에게 되돌려 보낼 잔액에 해당한다.

// We can further explore the blockchain by examining the previous transaction referenced by its +txid+ in this transaction using the same commands (e.g., +getrawtransaction+). Jumping from transaction to transaction we can follow a chain of transactions back as the coins are transmitted from owner address to owner address.
동일한 명령어를 사용하여 (예: +getrawtransaction+) 이전 거래의 +txid+ 를 참조하여 해당 거래 정보를 블록체인에서 찾아 볼 수 있다. 비트코인이 새로운 소유주로 전송되면 각 거래를 넘나들면서 연결된 거래들을 추적할 수 있다.



// ==== Exploring Blocks
==== 블록 탐색하기

// ((("Bitcoin Core", "Bitcoin Core API", "exploring blocks")))((("blocks", "exploring with Bitcoin Core API")))Commands: +getblock+, +getblockhash+
((("Bitcoin Core", "Bitcoin Core API", "exploring blocks")))((("blocks", "exploring with Bitcoin Core API")))명령어: +getblock+, +getblockhash+

// ((("blocks", "block height")))((("blocks", "block hash")))Exploring blocks is similar to exploring transactions. However, blocks can be referenced either by the block _height_ or by the block _hash_. First, let's find a block by its height. In <<cup_of_coffee>>, we saw that Alice's transaction was included in block 277316.
((("blocks", "block height")))((("blocks", "block hash")))블록을 탐색하는 것은 거래를 탐색하는 것과 유사하다. 그러나 블록은 블록 _높이_ 나 블록 _해시_ 로 참조될 수 있다. 먼저 블록 높이로 블록을 찾아보자. <<cup_of_coffee>> 에서 앨리스의 거래가 블록 277316에 포함된 것을 확인하였다.

// We use the +getblockhash+ command, which takes the block height as the parameter and returns the block hash for that block:
+getblockhash+ 명령을 실행하면 블록 높이를 매개변수로 사용하고 그 블록에 대한 블록 해시를 반환한다.

++++
<pre data-type="programlisting">
$ bitcoin-cli getblockhash 277316
0000000000000001b6b9a13b095e96db41c4a928b97ef2d944a9b31b2cc7bdc4
</pre>
++++

// Now that we know which block Alice's transaction was included in, we can query that block. We use the +getblock+ command with the block hash as the parameter:
이제 앨리스의 거래가 어느 블록에 포함되었는지 알 수 있기 때문에 해당 블록을 쿼리(query) 할 수 있다. 매개변수로 블록 해시를 사용하여 +getblock+ 명령어를 사용해 보자.

++++
<pre data-type="programlisting">
$ bitcoin-cli getblock 0000000000000001b6b9a13b095e96db41c4a928b97ef2d944a9b3&#x21b5;
1b2cc7bdc4
</pre>
++++

++++
<pre data-type="programlisting" data-code-language="json">
{
  "hash": "0000000000000001b6b9a13b095e96db41c4a928b97ef2d944a9b31b2cc7bdc4",
  "confirmations": 37371,
  "size": 218629,
  "height": 277316,
  "version": 2,
  "merkleroot": "c91c008c26e50763e9f548bb8b2fc323735f73577effbc55502c51eb4cc7cf2e",
  "tx": [
    "d5ada064c6417ca25c4308bd158c34b77e1c0eca2a73cda16c737e7424afba2f",
    "b268b45c59b39d759614757718b9918caf0ba9d97c56f3b91956ff877c503fbe",
    "04905ff987ddd4cfe603b03cfb7ca50ee81d89d1f8f5f265c38f763eea4a21fd",
    "32467aab5d04f51940075055c2f20bbd1195727c961431bf0aff8443f9710f81",
    "561c5216944e21fa29dd12aaa1a45e3397f9c0d888359cb05e1f79fe73da37bd",
[... hundreds of transactions ...]
    "78b300b2a1d2d9449b58db7bc71c3884d6e0579617e0da4991b9734cef7ab23a",
    "6c87130ec283ab4c2c493b190c20de4b28ff3caf72d16ffa1ce3e96f2069aca9",
    "6f423dbc3636ef193fd8898dfdf7621dcade1bbe509e963ffbff91f696d81a62",
    "802ba8b2adabc5796a9471f25b02ae6aeee2439c679a5c33c4bbcee97e081196",
    "eaaf6a048588d9ad4d1c092539bd571dd8af30635c152a3b0e8b611e67d1a1af",
    "e67abc6bd5e2cac169821afc51b207127f42b92a841e976f9b752157879ba8bd",
    "d38985a6a1bfd35037cb7776b2dc86797abbb7a06630f5d03df2785d50d5a2ac",
    "45ea0a3f6016d2bb90ab92c34a7aac9767671a8a84b9bcce6c019e60197c134b",
    "c098445d748ced5f178ef2ff96f2758cbec9eb32cb0fc65db313bcac1d3bc98f"
  ],
  "time": 1388185914,
  "mediantime": 1388183675,
  "nonce": 924591752,
  "bits": "1903a30c",
  "difficulty": 1180923195.258026,
  "chainwork": "000000000000000000000000000000000000000000000934695e92aaf53afa1a",
  "previousblockhash": "0000000000000002a7bbd25a417c0374cc55261021e8a9ca74442b01284f0569",
  "nextblockhash": "000000000000000010236c269dd6ed714dd5db39d36b33959079d78dfd431ba7"
}
</pre>
++++

// The block contains 419 transactions and the 64th transaction listed (+0627052b...+) is Alice's coffee payment. The +height+ entry tells us this is the 277316th block in the blockchain.
블록은 419 개의 거래로 구성되며 64 번째 거래 (+0627052b...+) 가 앨리스의 커피 지불값이다. +height+ 는 해당 블록이 블록체인에서 277316 번째 거래라는 것을 나타낸다.

// ==== Using Bitcoin Core's Programmatic Interface
==== 비트코인 코어의 프로그래밍 인터페이스 사용

// ((("Bitcoin Core", "Bitcoin Core API", "using programmatic interface")))((("programmatic interface", id="progint03")))The +bitcoin-cli+ helper is very useful for exploring the Bitcoin Core API and testing functions. But the whole point of an application programming interface is to access functions programmatically. In this section we will demonstrate accessing Bitcoin Core from another program.
((("Bitcoin Core", "Bitcoin Core API", "using programmatic interface")))((("programmatic interface", id="progint03")))+bitcoin-cli+ 헬퍼는 비트코인 코어 API를 탐색하고 함수를 테스트할 때 매우 유용하다. 그러나 어플리케이션 프로그래밍 인터페이스의 포인트는 프로그래밍 방식으로 함수에 접근한다는 것이다. 이번 섹션에서는 다른 프로그램으로부터 비트코인 코어에 접속하는 방법을 소개할 것이다.

// Bitcoin Core's API is a JSON-RPC interface. JSON stands for JavaScript Object Notation and it is a very convenient way to present data that both humans and programs can easily read. RPC stands for Remote Procedure Call, which means that we are calling procedures (functions) that are remote (on the Bitcoin Core node) via a network protocol. In this case, the network protocol is HTTP, or HTTPS (for encrypted connections).
비트코인 코어 API는 JSON-RPC 인터페이스이다. JSON은 자바스크립트 객체 표기법을 의미하며 사람이나 프로그램이 쉽게 읽을 수 있는 데이터를 제시하는 매우 편리한 방법이다. RPC는 원격 프로시저 호출 (Remote Procedure Call을 나타내며 이는 네트워크 프로토콜을 통해 원격 (비트코인 코어 노드에 있는) 프로시저 (함수)를 호출함을 의미한다. 이 경우에 네트워크 프로토콜은 HTTP 또는 HTTPS (암호화된 연결의 경우)이다.

// When we used the +bitcoin-cli+ command to get help on a command, it showed us an example of using +curl+, the versatile command-line HTTP client to construct one of these JSON-RPC calls:
명령어에 대한 도움을 얻기 위해 +bitcoin-cli+ 명령을 사용하면, 이러한 JSON-RPC 호출 중 하나를 구성하기 위해 다목적 명령행 HTTP 클라이언트인 +curl+ 을 사용한 예시를 보여준다.

----
$ curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockchaininfo", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/
----

// This command shows that +curl+ submits an HTTP request to the local host (127.0.0.1), connecting to the default bitcoin port (8332), and submitting a  +jsonrpc+ request for the +getblockchaininfo+ method using +text/plain+ encoding.
이 명령은 +curl+ 이 HTTP 요청을 로컬 호스트 (127.0.0.1)에 제출하고 기본 비트코인 포트 (8332)에 연결하며 +text/plain+ 인코딩을 사용하여 +getblockchaininfo+ 방법에 대한 +jsonrpc+ 요청을 제출함을 보여준다.

// You might notice that curl will ask for credentials to be sent along with the request. Bitcoin Core will create a random password on each start and place it in the data directory under the name +.cookie+. The +bitcoin-cli+ helper can read this password file given the data directory. Similarly, you can copy the password and pass it to curl (or any higher level Bitcoin Core RPC wrappers). Alternatively, you can create a static password with the helper script provided in _./share/rpcuser/rpcuser.py_ in Bitcoin Core's source directory.
명령어 curl이 요청과 함께 전송될 자격 증명을 요청할 수도 있다. 비트코인 코어는 시작할 때마다 무작위 비밀번호를 생성하고 +.cookie+ 의 이름으로 데이터 디렉토리에 저장한다. +bitcoin-cli+ 헬퍼는 주어진 데이터 디렉토리에서 이 비밀번호 파일을 읽을 수 있다. 마찬가지로 암호를 복사하여 curl (또는 상위 비트코인 코어 RPC 래퍼)에 전달할 수 있다. 또는 비트코인 코어 소스 디렉토리 내 _./share/rpcuser/rpcuser.py_ 에서 제공하는 헬퍼 스크립트를 사용하여 고정된 비밀번호를 생성할 수도 있다.

// If you're implementing a JSON-RPC call in your own program, you can use a generic HTTP library to construct the call, similar to what is shown in the preceding +curl+ example.
자체 프로그램에서 JSON-RPC 호출을 구현하는 경우, 호출을 구성하기 위해 앞의 +curl+ 예제와 유사하게 일반 HTTP 라이브러리를 사용할 수 있다.

// However, there are libraries in most every programming language that "wrap" the Bitcoin Core API in a way that makes this a lot simpler. We will use the +python-bitcoinlib+ library to simplify API access. Remember, this requires you to have a running Bitcoin Core instance, which will be used to make JSON-RPC calls.
그러나 비트코인 코어 API를 더 단순하게 "랩핑 (wrap)" 하는 대부분의 프로그래밍 언어들에는 라이브러리가 존재한다. 우리는 API 접근을 단순화하기 위해 +python-bitcoinlib+ 라이브러리를 사용할 것이다. 이것은 JSON-RPC 호출을 실행하기 위해 사용될 비트코인 코어 인스턴스 (instance) 실행을 요구한다는 것을 기억하라.

// The Python script in <<rpc_example>> makes a simple +getblockchaininfo+ call and prints the +block+ parameter from the data returned by Bitcoin Core.
<<rpc_example>> 의 파이썬 스크립트는 단순한 +getblockchaininfo+ 호출을 만들고 비트코인 코어에서 반환된 데이터로부터 +block+ 파라미터를 출력한다.

[[rpc_example]]
// .Running getblockchaininfo via Bitcoin Core's JSON-RPC API
.비트코인 코어의 JSON-RPC API를 통해 getblockchaininfo 실행하기
====
[source,python]
----
include::code/rpc_example.py[]
----
====

// Running it gives us the following result:
이를 실행하면 다음과 같은 결과가 나타난다:

----
$ python rpc_example.py
394075
----

// It tells us that our local Bitcoin Core node has 394075 blocks in its blockchain. Not a spectacular result, but it demonstrates the basic use of the library as a simplified interface to Bitcoin Core's JSON-RPC API.
로컬 비트코인 코어 노드는 블록체인에 394075 블록이 있다는 것을 나타낸다. 탁월한 결과는 아니지만 비트코인 코어의 JSON-RPC API에 대한 단순화된 인터페이스로서의 라이브러리 기본 사용을 보여준다.

// Next, let's use the +getrawtransaction+ and +decodetransaction+ calls to retrieve the details of Alice's coffee payment. In <<rpc_transaction>>, we retrieve Alice's transaction and list the transaction's outputs. For each output, we show the recipient address and value. As a reminder, Alice's transaction had one output paying Bob's Cafe and one output for change back to Alice.
다음으로 앨리스 커피 결제의 세부 정보를 검색하기 위해 +getrawtransaction+ 및 +decodetransaction+ 호출을 사용해 보자. <<rpc_transaction>> 에서 앨리스의 거래를 검색하고 거래의 출력값을 나열했다. 각 출력값에 대해서 수신자 주소와 값을 표시했다. 다시 말하자면, 앨리스의 거래는 밥의 까페에 지불하는 출력값 하나와 앨리스에게 되돌아가는 잔액에 대한 출력값 하나를 가진다.

[[rpc_transaction]]
// .Retrieving a transaction and iterating its outputs
.거래 검색 및 이에 대한 출력값 반복하기
====
[source,python]
----
include::code/rpc_transaction.py[]
----
====

// Running this code, we get:
이 코드를 실행하면 다음과 같이 나타난다:

----
$ python rpc_transaction.py
([u'1GdK9UzpHBzqzX2A9JFP3Di4weBwqgmoQA'], Decimal('0.01500000'))
([u'1Cdid9KFAaatwczBwBttQcwXYCpvK8h7FK'], Decimal('0.08450000'))
----

// Both of the preceding examples are rather simple. You don't really need a program to run them; you could just as easily use the +bitcoin-cli+ helper. The next example, however, requires several hundred RPC calls and more clearly demonstrates the use of a programmatic interface.
앞에 소개한 예시들은 모두 다소 단순하다. 이것들을 실행하기 위해 프로그램이 필요하지 않을 수도 있다; +bitcoin-cli+ 헬퍼를 사용하면 된다. 그러나 다음 예에서는 수 백가지의 RPC 호출을 요구하고 프로그래밍 인터페이스의 사용을 보다 명확하게 보여준다.

// In <<rpc_block>>, we first retrieve block 277316, then retrieve each of the 419 transactions within by reference to each transaction ID. Next, we iterate through each of the transaction's outputs and add up the value.((("", startref="alicethree")))
<<rpc_block>> 에서 처음에는 277316 블록을 검색하고 그 후 각 거래 ID에 대한 참조를 통해 419 개의 거래를 각각 검색했다. 다음으로 각 거래의 출력을 반복하고 값을 합산했다.((("", startref="alicethree")))

[[rpc_block]]
// .Retrieving a block and adding all the transaction outputs
.블록 검색 및 모든 출력값 합산하기
====
[source,python]
----
include::code/rpc_block.py[]
----
====

// Running this code, we get:
이 코드를 실행하면 다음과 같은 결과가 나타난다:

----
$ python rpc_block.py

('Total value in block: ', Decimal('10322.07722534'))
----

// Our example code calculates that the total value transacted in this block is 10,322.07722534 BTC (including 25 BTC reward and 0.0909 BTC in fees). Compare that to the amount reported by a block explorer site by searching for the block hash or height. Some block explorers report the total value excluding the reward and excluding the fees. See if you can spot the difference.((("", startref="BCapi03")))((("", startref="progint03")))
이 예시에서는 이 블록에서 거래된 총 금액이 10,322.07722534 BTC (25 BTC 보상 및 0.0909 BTC 수수료 포함)라는 것을 계산한다. 블록 해시나 높이를 검색하여 블록 익스플로러 사이트에서 제공되는 금액과 비교해 보라. 일부 블록 익스플로러에서는 보상 및 수수료를 제외한 총 금액을 제공한다. 차이점을 발견할 수 있는지 확인하라.((("", startref="BCapi03")))((("", startref="progint03")))

[[alt_libraries]]
// === Alternative Clients, Libraries, and Toolkits
=== 그 외 사용 가능한 클라이언트, 라이브러리 및 툴키트

// ((("Bitcoin Core", "alternatives to", id="BCalt03")))((("clients, libraries, and toolkits", id="clients03")))((("libraries, clients, and toolkits", id="librar03")))((("toolkits, libraries, and clients", id="toolkit03")))((("third-party API clients", id="thirdpart03")))There are many alternative clients, libraries, toolkits, and even full-node implementations in the bitcoin ecosystem. These are implemented in a variety of programming languages, offering programmers native interfaces in their preferred language.
((("Bitcoin Core", "alternatives to", id="BCalt03")))((("clients, libraries, and toolkits", id="clients03")))((("libraries, clients, and toolkits", id="librar03")))((("toolkits, libraries, and clients", id="toolkit03")))((("third-party API clients", id="thirdpart03")))비트코인 생태계에는 다양한 클라이언트, 라이브러리, 툴키트 및 심지어 풀 노드 구현들이 존재한다. 다양한 프로그래밍 언어로 구현되므로 프로그래머들이 선호하는 언어로 네이티브 인터페이스 (native interface)를 제공한다.

// The following sections list some of the best libraries, clients, and toolkits, organized by programming languages.
다음 섹션에서는 프로그래밍 언어별로 정리된 가장 많이 사용되는 라이브러리, 클라이언트 및 툴키트 중 일부를 소개한다.

==== C/C++
// https://github.com/bitcoin/bitcoin[Bitcoin Core] :: The reference implementation of bitcoin
https://github.com/bitcoin/bitcoin[Bitcoin Core] :: 비트코인의 참조구현
// https://github.com/libbitcoin/libbitcoin[libbitcoin]:: Cross-platform C++ development toolkit, node, and consensus library
https://github.com/libbitcoin/libbitcoin[libbitcoin]:: C++ 개발 툴키트, 노드 및 합의 라이브러리 크로스 플랫폼
// https://github.com/libbitcoin/libbitcoin-explorer[bitcoin explorer]:: Libbitcoin's command-line tool
https://github.com/libbitcoin/libbitcoin-explorer[bitcoin explorer]:: Libbitcoin의 명령행 도구
// https://github.com/jgarzik/picocoin[picocoin]:: A C language lightweight client library for bitcoin by Jeff Garzik
https://github.com/jgarzik/picocoin[picocoin]:: Jeff Garzik가 개발한 비트코인용 라이트웨이트 클라이언트 라이브러리 C 구현

==== JavaScript
// http://bcoin.io/[bcoin]:: A modular and scalable full-node implementation with API
http://bcoin.io/[bcoin]:: API를 사용한 모듈화되고 확장 가능한 풀 노드 구현
// https://bitcore.io/[Bitcore] :: Full node, API, and library by Bitpay
https://bitcore.io/[Bitcore] :: Bitpay의 풀 노드, API 및 라이브러리
// https://github.com/bitcoinjs/bitcoinjs-lib[BitcoinJS] :: A pure JavaScript Bitcoin library for node.js and browsers
https://github.com/bitcoinjs/bitcoinjs-lib[BitcoinJS] :: node.js 및 브라우저를 위한 자바스크립트 비트코인 라이브러리

==== Java
// https://bitcoinj.github.io[bitcoinj]:: A Java full-node client library
https://bitcoinj.github.io[bitcoinj]:: 자바 풀 노드 클라이언트 라이브러리
// https://bitsofproof.com[Bits of Proof (BOP)]:: A Java enterprise-class implementation of bitcoin
https://bitsofproof.com[Bits of Proof (BOP)]:: 비트코인의 자바 엔터프라이즈 클래스 구현

==== PHP
// https://github.com/bit-wasp/bitcoin-php[bitwasp/bitcoin]:: A PHP bitcoin library, and related projects
https://github.com/bit-wasp/bitcoin-php[bitwasp/bitcoin]:: PHP 비트코인 라이브러리 및 연관 프로젝트

==== Python
// https://github.com/petertodd/python-bitcoinlib[python-bitcoinlib]::  A Python bitcoin library, consensus library, and node by Peter Todd
https://github.com/petertodd/python-bitcoinlib[python-bitcoinlib]:: Peter Todd가 개발한 파이썬 비트코인 라이브러리, 합의 라이브러리 및 노드
// https://github.com/richardkiss/pycoin[pycoin]:: A Python bitcoin library by Richard Kiss
https://github.com/richardkiss/pycoin[pycoin]:: Richard Kiss가 개발한 파이썬 비트코인 라이브러리
// https://github.com/vbuterin/pybitcointools[pybitcointools]:: A Python bitcoin library by Vitalik Buterin
https://github.com/vbuterin/pybitcointools[pybitcointools]:: Vitalik Buterin이 개발한 파이썬 비트코인 라이브러리

==== Ruby
// https://github.com/sinisterchipmunk/bitcoin-client[bitcoin-client]:: A Ruby library wrapper for the JSON-RPC API
https://github.com/sinisterchipmunk/bitcoin-client[bitcoin-client]:: JSON-RPC API에 대한 Ruby 라이브러리 래퍼

==== Go
// https://github.com/btcsuite/btcd[btcd]:: A Go language full-node bitcoin client
https://github.com/btcsuite/btcd[btcd]:: Go 언어 풀 노드 비트코인 클라이언트

==== Rust
// https://github.com/apoelstra/rust-bitcoin[rust-bitcoin]:: Rust bitcoin library for serialization, parsing, and API calls
https://github.com/apoelstra/rust-bitcoin[rust-bitcoin]:: 직렬화 (serialization), 파싱 (parsing), API 호출을 위한 Rust 비트코인 라이브러리

==== C#
// https://github.com/MetacoSA/NBitcoin[NBitcoin]:: Comprehensive bitcoin library for the .NET framework
https://github.com/MetacoSA/NBitcoin[NBitcoin]:: .NET framework에 대한 포괄적인 비트코인 라이브러리

==== Objective-C
// https://github.com/oleganza/CoreBitcoin[CoreBitcoin]:: Bitcoin toolkit for ObjC and Swift
https://github.com/oleganza/CoreBitcoin[CoreBitcoin]:: ObjC 및 Swift에 대한 비트코인 툴키트

// Many more libraries exist in a variety of other programming languages and more are created all the time.((("", startref="BCalt03")))((("", startref="clients03")))((("", startref="thirdpart03")))((("", startref="toolkit03")))((("", startref="librar03")))
더 많은 라이브러리가 다양한 프로그래밍 언어로 존재하며, 그 외의 라이브러리들도 계속해서 생성되고 있다.((("", startref="BCalt03")))((("", startref="clients03")))((("", startref="thirdpart03")))((("", startref="toolkit03")))((("", startref="librar03")))
